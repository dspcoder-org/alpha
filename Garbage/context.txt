self.start_context_working = """
                            Your task it to modify given code files for new algorithm which I will provide. current files are written for reverse_linked_list algorithm
                            <Important> note: This files are used in backend so dont change structure of them. 
                            Following is brief overview of files 
                            user can see and edit - main.c , lib.a(created using lib.c), util.h
                            main.c/cpp : user on our platform will see this file. this will have a function which user will write its answer in. 
                            lib.c/cpp : This file will only have utility code. we need to hide few functions from user for which we are creating this file. As user can edit util.h instead of importing it copy its content directly as I have done in my files.
                            main_dev.c/cpp : this file will be similar to main.c but with answer for the question. we will use to generate binary which will be compared with user binary while testing. As user can edit util.h instead of importing it copy its content directly as I have done in my files.
                            util.h/hpp : this has declaration of structure and functions hidden inside .a file made using lib.c.
                            test.py : this is used to test code.
                            """
        
        self.start_context_1 = """
                            Your task is to modify necessary element of given code files to accomodate new algorithm. 
                            Overview of file is as follow 
                            1. lib.c/cpp this file contains setup_question description and utility functions it needs. it also contain content of util.h as it is needed to compile this to .a file as standalone. 
                            2. main.c/cpp : this will have a function which I will write. leave this function blank for me to write
                            3. main_dev.c/cpp : this file will be similar to main.c but with answer for the question. I will use binary of main_dev.c to compare with edited main.c file while testing. As I can edit util.h instead of importing it copy its content directly in main_dev.c.
                            4. util.h/hpp : this has declaration of structure and functions hidden inside .a file made using lib.c.
                            5. test.py : this is used to test code. 
                            """
        
        self.start_context = """
                            Your task is to modify necessary elements of the given code files to accommodate a new algorithm. 
                            Overview of the files is as follows:
                            1. lib.c/cpp: This file contains setup_question description and utility functions it needs. It also contains the content of util.h as it is needed to compile this to a .a file as standalone.
                            2. main.c/cpp: This will have a function which I will write. Leave this function blank for me to write.
                            3. main_dev.c/cpp: This file will be similar to main.c but with the answer for the question. I will use the binary of main_dev.c to compare with the edited main.c file while testing. As I can edit util.h instead of importing it, copy its content directly in main_dev.c.
                            4. util.h/hpp: This has the declaration of structure and functions hidden inside the .a file made using lib.c.
                            5. test.py: This is used to test code.
                            """
        
        self.end_context_1 =  """
                            Your task is to generate four new code files based on the original files, but implementing the new algorithm. Follow these guidelines:

                            1. Maintain the same overall structure as the original files.
                            2. Keep the majority of the code the same, including imports, class definitions, and helper functions.
                            3. Modify only the algorithm-specific code to implement the new algorithm.
                            4. Ensure that variable names, function names, and coding style remain consistent with the original files.
                            5. Update comments  to reflect the new algorithm, if necessary.
                            6. If the new algorithm requires additional helper functions or slight modifications to existing functions, implement them in a way that minimizes changes to the overall structure.
                            7. readme.md : try to keep similar structure here of problem description, basic examples, constraints
                            8. solution.md : keep this file empty 
                            9. test.py : I want you make testing more aggressive. I have given only 10 test cases but i want you to make 20+ based on need. Test every edge case, every constraint. time complexity, space complexity etc. 
                                        self.RUN will always be 3
                            
                            Remember, it's crucial to keep the structure and majority of the code as similar as possible to the original files. Only modify the parts directly related to implementing the new algorithm.

                            VERY IMPORTANT: 
                            please provide code in following format in text and not in markdown or any other format.

                            <lib.c>
                            [Generated code for lib.c]
                            </lib.c>

                            <main.c>
                            [Generated code for main.c]
                            </main.c>

                            <main_dev.c>
                            [Generated code for main_dev.c]
                            </main_dev.c>

                            <util.h>
                            [Generated code for util.h]
                            </util.h>
                            
                            for Cpp language
                            
                            <lib.cpp>
                            [Generated code for lib.c]
                            </lib.cpp>

                            <main.cpp >
                            [Generated code for main.c]
                            </main.cpp>

                            <main_dev.cpp>
                            [Generated code for main_dev.c]
                            </main_dev.cpp>

                            <util.hpp>
                            [Generated code for util.h]
                            </util.hpp>
                            
                            <readme.md>
                            [Generated code for readme.md]
                            </readme.md>
                            
                            <solution.md>
                            [Generated code for solution.md]
                            </solution.md>
                            
                            <test.py>
                            [Generated code for test.py]
                            </test.py>
                            
                            <launch.json>
                            [Generated code for launch.json]
                            </launch.json>

                            Ensure that each file contains the complete code, including any necessary imports, class definitions, and functions from the original files, with only the algorithm-specific parts modified to implement the new algorithm.
                            VERY IMPORTANT: 
                            please provide code in following format in text and not in markdown or any other format.
                            """
        
        self.end_context = """
                            Your task is to generate four new code files based on the original files, but implementing the new algorithm. Follow these guidelines:
                            1. Maintain the same overall structure as the original files.
                            2. Keep the majority of the code the same, including imports, class definitions, and helper functions.
                            3. Modify only the algorithm-specific code to implement the new algorithm.
                            4. Ensure that variable names, function names, and coding style remain consistent with the original files.
                            5. Update comments to reflect the new algorithm, if necessary.
                            6. If the new algorithm requires additional helper functions or slight modifications to existing functions, implement them in a way that minimizes changes to the overall structure.
                            7. readme.md: Try to keep a similar structure here of problem description, basic examples, constraints.
                            8. solution.md: Keep this file empty.
                            9. test.py: Make testing more aggressive. I have given only 10 test cases but I want you to make 20+ based on need. Test every edge case, every constraint, time complexity, space complexity, etc. self.RUN will always be 3.

                            Remember, it's crucial to keep the structure and majority of the code as similar as possible to the original files. Only modify the parts directly related to implementing the new algorithm.

                            VERY IMPORTANT: 
                            Please provide code in the following format in text and not in markdown or any other format.

                            <lib.c>
                            [Generated code for lib.c]
                            </lib.c>

                            <main.c>
                            [Generated code for main.c]
                            </main.c>

                            <main_dev.c>
                            [Generated code for main_dev.c]
                            </main_dev.c>

                            <util.h>
                            [Generated code for util.h]
                            </util.h>

                            For Cpp language

                            <lib.cpp>
                            [Generated code for lib.c]
                            </lib.cpp>

                            <main.cpp>
                            [Generated code for main.c]
                            </main.cpp>

                            <main_dev.cpp>
                            [Generated code for main_dev.c]
                            </main_dev.cpp>

                            <util.hpp>
                            [Generated code for util.h]
                            </util.hpp>

                            <readme.md>
                            [Generated code for readme.md]
                            </readme.md>

                            <solution.md>
                            [Generated code for solution.md]
                            </solution.md>

                            <test.py>
                            [Generated code for test.py]
                            </test.py>

                            Ensure that each file contains the complete code, including any necessary imports, class definitions, and functions from the original files, with only the algorithm-specific parts modified to implement the new algorithm.
                            VERY IMPORTANT: 
                            Please provide code in the following format in text and not in markdown or any other format.
        """