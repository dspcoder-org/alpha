Problem Description
    Given the head of a singly linked list, write functions to add or delete a node in the linked list. The functions should handle the operations efficiently and maintain the integrity of the linked list.

Input Format:
    The input consists of multiple lines:
    - The first line contains an integer n, the number of nodes in the initial linked list.
    - The second line contains n space-separated integers, representing the values of the nodes in the linked list.
    - The third line contains an integer m, the number of operations to perform.
    - The next m lines each contain a description of an operation, which can be either:
        - "add x y": Add a node with value y after the node with value x.
        - "delete x": Delete the node with value x from the linked list.

Examples

    Example 1:
    Input:
        5
        1 2 3 4 5
        2
        add 3 6
        delete 2
    Output:
        1 3 6 4 5
    Explanation: The original linked list is 1 → 2 → 3 → 4 → 5. After adding 6 after 3, it becomes 1 → 2 → 3 → 6 → 4 → 5. Then, deleting 2 results in 1 → 3 → 6 → 4 → 5.

    Example 2:
    Input:
        3
        10 20 30
        1
        delete 20
    Output:
        10 30
    Explanation: The original linked list 10 → 20 → 30 is modified by deleting 20, resulting in 10 → 30.

    Example 3:
    Input:
        1
        42
        1
        add 42 99
    Output:
        42 99
    Explanation: A single-node linked list 42 has 99 added after it, resulting in 42 → 99.

Constraints:
    The number of nodes in the list is in the range [0, 10⁴].
    -10⁵ ≤ Node.val ≤ 10⁵.
    The number of operations m is in the range [0, 10⁴].
    It is guaranteed that for "delete x", the node with value x exists in the list.
    It is guaranteed that for "add x y", the node with value x exists in the list.