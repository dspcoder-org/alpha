Problem Description
    Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put.

    - get(key): Retrieve the value of the key if the key exists in the cache; otherwise, return -1.
    - put(key, value): Insert the key-value pair into the cache. If the key already exists, update its value and mark it as the most recently used. If the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.

    The cache should be initialized with a positive capacity.

Input Format:
    The input consists of multiple lines:
    - The first line contains an integer capacity, the maximum number of items the cache can hold.
    - The subsequent lines contain operations in the format "get key" or "put key value".

Examples

    Example 1:
    Input:
        2
        put 1 1
        put 2 2
        get 1
        put 3 3
        get 2
        put 4 4
        get 1
        get 3
        get 4
    Output:
        1
        -1
        -1
        3
        4
    Explanation:
        - Initialize the cache with capacity 2.
        - put(1, 1): Cache is {1=1}.
        - put(2, 2): Cache is {1=1, 2=2}.
        - get(1): Returns 1.
        - put(3, 3): Evicts key 2, Cache is {1=1, 3=3}.
        - get(2): Returns -1 (not found).
        - put(4, 4): Evicts key 1, Cache is {4=4, 3=3}.
        - get(1): Returns -1 (not found).
        - get(3): Returns 3.
        - get(4): Returns 4.

    Example 2:
    Input:
        1
        put 1 10
        get 1
        put 2 20
        get 1
        get 2
    Output:
        10
        -1
        20
    Explanation:
        - Initialize the cache with capacity 1.
        - put(1, 10): Cache is {1=10}.
        - get(1): Returns 10.
        - put(2, 20): Evicts key 1, Cache is {2=20}.
        - get(1): Returns -1 (not found).
        - get(2): Returns 20.
    
    Example 3:
    Input:
        2
        put 1 100
        put 2 200
        put 1 300
        get 1
        put 3 400
        get 2
        get 3
    Output:
        300
        -1
        400
    Explanation:
        - Initialize the cache with capacity 2.
        - put(1, 100): Cache = {1=100}.
        - put(2, 200): Cache = {1=100, 2=200}.
        - put(1, 300): Updates value of key 1, moves it to most recently used, Cache = {2=200, 1=300}.
        - get(1): Returns 300.
        - put(3, 400): Cache is full, evicts least recently used key 2, Cache = {1=300, 3=400}.
        - get(2): Returns -1 (not found).
        - get(3): Returns 400.

Constraints:
    - 1 ≤ capacity ≤ 10⁴
    - 0 ≤ key, value ≤ 10⁵
    - At most 2 * 10⁴ calls will be made to get and put.
    - Keys are unique within the cache
    - If put(key, value) is called on an existing key, update its value and mark it as the most recently used.