<lib.c>
#include <stdio.h>
#include <stdlib.h>

#define VERIFY(cond)   \
    if (!(cond)) {             \
        printf("._bad_input"); \
        exit(0);               \
    }

// Content of util.h

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Linked_List {
    int data;
    struct Linked_List* next;
};

// Function prototypes
extern struct Linked_List* setup_question(int argc, char* argv[], struct Linked_List** headB);
extern void print_Intersection(struct Linked_List* intersection);

// end of util.h

struct Linked_List* buildLinkedList(int arr[], int n){
    
    struct Linked_List* head = (struct Linked_List* ) malloc(sizeof(struct Linked_List));

    if(n == 0){
        return NULL; 
    }

    struct Linked_List* dummy_head = head; 
    
    for(int i = 0; i < n ; i++){
        dummy_head->data = arr[i]; 
        if (i != n-1){
            dummy_head->next = (struct Linked_List* ) malloc(sizeof(struct Linked_List));
            dummy_head = dummy_head->next; 
        }
    }

    return head; 
}

void print_Intersection(struct Linked_List* intersection){
    if(intersection == NULL){
        printf("null\n");
    } else {
        printf("%d\n", intersection->data);
    }
}

struct Linked_List* setup_question(int argc, char* argv[], struct Linked_List** headB) {

    if (argc == 1) {
        int n, m, temp;
        
        // Input the number of elements for the first list
        VERIFY(((scanf("%d", &n)) > 0));

        // Create an array to store the node values for the first list
        int nodesA[n];

        // Input the values into the array for the first list
        for (int i = 0; i < n; i++) {
            VERIFY(((scanf("%d", &nodesA[i])) > 0));
        }

        // Input the number of elements for the second list
        VERIFY(((scanf("%d", &m)) > 0));

        // Create an array to store the node values for the second list
        int nodesB[m];

        // Input the values into the array for the second list
        for (int i = 0; i < m; i++) {
            VERIFY(((scanf("%d", &nodesB[i])) > 0));
        }

        VERIFY(((scanf("%d", &temp)) == EOF));

        // Build the linked lists
        struct Linked_List* headA = buildLinkedList(nodesA, n);
        *headB = buildLinkedList(nodesB, m);

        return headA;
    } else {
        int n = atoi(argv[1]);
        int nodesA[n];

        for (int i = 0; i < n; i++) {
            nodesA[i] = atoi(argv[i+2]);
        }

        int m = atoi(argv[n+2]);
        int nodesB[m];

        for (int i = 0; i < m; i++) {
            nodesB[i] = atoi(argv[n+3+i]);
        }

        // Build the linked lists
        struct Linked_List* headA = buildLinkedList(nodesA, n);
        *headB = buildLinkedList(nodesB, m);

        return headA;
    }
}
</lib.c>

<main.c>
#include "util.h"

struct Linked_List* getIntersectionNode(struct Linked_List* headA, struct Linked_List* headB) {
    // Write your code here
    return NULL;
}

int main(int argc, char* argv[]) {

    // Setup the linked lists
    struct Linked_List* headB;
    struct Linked_List* headA = setup_question(argc, argv, &headB);
    
    // User function to find the intersection node
    struct Linked_List* intersection = getIntersectionNode(headA, headB); 

    // Print the intersection node
    print_Intersection(intersection);
    
    return 0;
}
</main.c>

<main_dev.c>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Linked_List {
    int data;
    struct Linked_List* next;
};

// Function prototypes
extern struct Linked_List* setup_question(int argc, char* argv[], struct Linked_List** headB);
extern void print_Intersection(struct Linked_List* intersection);

struct Linked_List* getIntersectionNode(struct Linked_List* headA, struct Linked_List* headB) {
    if (!headA || !headB) return NULL;

    struct Linked_List* a = headA;
    struct Linked_List* b = headB;

    while (a != b) {
        a = a ? a->next : headB;
        b = b ? b->next : headA;
    }

    return a;
}

int main(int argc, char* argv[]) {

    // Setup the linked lists
    struct Linked_List* headB;
    struct Linked_List* headA = setup_question(argc, argv, &headB);
    
    // User function to find the intersection node
    struct Linked_List* intersection = getIntersectionNode(headA, headB); 

    // Print the intersection node
    print_Intersection(intersection);
    
    return 0;
}
</main_dev.c>

<util.h>
#ifndef UTIL_H
#define UTIL_H

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Linked_List {
    int data;
    struct Linked_List* next;
};

// Function prototypes
extern struct Linked_List* setup_question(int argc, char* argv[], struct Linked_List** headB);
extern void print_Intersection(struct Linked_List* intersection);

#endif // UTIL_H
</util.h>

<lib.cpp>
#include <iostream>
#include <vector>

#define VERIFY(cond)   \
    if (!(cond)) {             \
        std::cout << "._bad_input\n"; \
        exit(0);               \
    }

// Copy content of util.hpp
class LinkedList {
public:
    int data;
    LinkedList* next;

    LinkedList(int val) : data(val), next(nullptr) {}
};

// Function declarations

LinkedList* setup_question(int argc, char* argv[], LinkedList** headB);
void print_Intersection(LinkedList* intersection);

// Function to build a linked list from an array
LinkedList* buildLinkedList(int arr[], int n) {
    if (n == 0) {
        return nullptr;
    }

    LinkedList* head = new LinkedList(arr[0]);
    LinkedList* dummy_head = head;

    for (int i = 1; i < n; ++i) {
        dummy_head->next = new LinkedList(arr[i]);
        dummy_head = dummy_head->next;
    }

    return head;
}

// Function to print the intersection node
void print_Intersection(LinkedList* intersection) {
    if (!intersection) {
        std::cout << "null\n";
    } else {
        std::cout << intersection->data << "\n";
    }
}

LinkedList* setup_question(int argc, char* argv[], LinkedList** headB) {

    if (argc == 1) {
        // Input the number of elements for the first list
        int n, m, temp;
        VERIFY((std::cin >> n));

        // Dynamically allocate an array to store the node values for the first list
        int* nodesA = new int[n];

        // Input the values into the array for the first list
        for (int i = 0; i < n; i++) {
            VERIFY((std::cin >> nodesA[i]));
        }

        // Input the number of elements for the second list
        VERIFY((std::cin >> m));

        // Dynamically allocate an array to store the node values for the second list
        int* nodesB = new int[m];

        // Input the values into the array for the second list
        for (int i = 0; i < m; i++) {
            VERIFY((std::cin >> nodesB[i]));
        }

        // Check if there are any extra inputs
        VERIFY((std::cin >> temp).fail() == true);

        // Build the linked lists
        LinkedList* headA = buildLinkedList(nodesA, n);
        *headB = buildLinkedList(nodesB, m);

        return headA;
    }
    else {
        int n = std::stoi(argv[1]);
        int* nodesA = new int[n];
        for (int i = 0; i < n; i++) {
            nodesA[i] = std::stoi(argv[i + 2]);
        }

        int m = std::stoi(argv[n + 2]);
        int* nodesB = new int[m];
        for (int i = 0; i < m; i++) {
            nodesB[i] = std::stoi(argv[n + 3 + i]);
        }

        // Build the linked lists
        LinkedList* headA = buildLinkedList(nodesA, n);
        *headB = buildLinkedList(nodesB, m);

        return headA;
    }
}
</lib.cpp>

<main.cpp>
#include "util.hpp"
#include <vector>
#include <iostream>

LinkedList* getIntersectionNode(LinkedList* headA, LinkedList* headB) {
    // Write your code here
    return nullptr;
}

int main(int argc, char* argv[]) {
    
    // Setup the linked lists
    LinkedList* headB;
    LinkedList* headA = setup_question(argc, argv, &headB);

    // Call the user function to find the intersection node
    LinkedList* intersection = getIntersectionNode(headA, headB);

    // Print the intersection node
    print_Intersection(intersection);

    return 0;
}
</main.cpp>

<main_dev.cpp>
#include <vector>
#include <iostream>

class LinkedList {
public:
    int data;
    LinkedList* next;

    LinkedList(int val) : data(val), next(nullptr) {}
};

// Function declarations

LinkedList* setup_question(int argc, char* argv[], LinkedList** headB);
void print_Intersection(LinkedList* intersection);

LinkedList* getIntersectionNode(LinkedList* headA, LinkedList* headB) {
    if (!headA || !headB) return nullptr;

    LinkedList* a = headA;
    LinkedList* b = headB;

    while (a != b) {
        a = a ? a->next : headB;
        b = b ? b->next : headA;
    }

    return a;
}

int main(int argc, char* argv[]) {
    
    // Setup the linked lists
    LinkedList* headB;
    LinkedList* headA = setup_question(argc, argv, &headB);

    // Call the user function to find the intersection node
    LinkedList* intersection = getIntersectionNode(headA, headB);

    // Print the intersection node
    print_Intersection(intersection);

    return 0;
}
</main_dev.cpp>

<util.hpp>
#ifndef UTIL_H
#define UTIL_H

#include <iostream>
#include <vector>

class LinkedList {
public:
    int data;
    LinkedList* next;

    LinkedList(int val) : data(val), next(nullptr) {}
};

// Function declarations

LinkedList* setup_question(int argc, char* argv[], LinkedList** headB);
void print_Intersection(LinkedList* intersection);

#endif // UTIL_H
</util.hpp>

<readme.md>
## Problem Description

Given the heads of two singly linked lists, write a function to find the node at which the two linked lists intersect. If the two linked lists have no intersection, return null.

## Input Format

The input consists of three lines:
1. The first line contains an integer n, the number of nodes in the first linked list.
2. The second line contains n space-separated integers, representing the values of the nodes in the first linked list.
3. The third line contains an integer m, the number of nodes in the second linked list.
4. The fourth line contains m space-separated integers, representing the values of the nodes in the second linked list.

## Examples

### Example 1:

**Input:**
```
5
4 1 8 4 5
4
5 6 1 8 4 5
```

**Output:**
```
8
```

**Explanation:**
The two linked lists intersect at node with value 8.

### Example 2:

**Input:**
```
2
1 9
3
3 2 4
```

**Output:**
```
null
```

**Explanation:**
The two linked lists do not intersect.

### Example 3:

**Input:**
```
3
2 6 4
3
1 5
```

**Output:**
```
null
```

**Explanation:**
The two linked lists do not intersect.

## Constraints:

1. The number of nodes in each list is in the range `[0, 10,000]`.
2. Each node's value satisfies `-100,000 ≤ Node.val ≤ 100,000`.
3. The lists may intersect at a single node, and the intersection is defined based on reference, not value.
</readme.md>

<solution.md>
# Solutions will be added soon.
</solution.md>

<test.py>
class testCases:
    def __init__(self, koro_exe) -> None:
        self.RUN = 3
        self.exe = koro_exe
        self.default_timeout_window = 10
        self.usage = 'prod'
        
    def test_case_1(self, timeout_window = 5, override = 0):
        # Normal case: intersection at a middle node
        no_of_input_args_A = 5
        input_A = [4, 1, 8, 4, 5]
        no_of_input_args_B = 4
        input_B = [5, 6, 1, 8, 4, 5]
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = '8'
        return numbers, expected_value

    def test_case_2(self, timeout_window = 5, override = 0):
        # Normal case: no intersection
        no_of_input_args_A = 2
        input_A = [1, 9]
        no_of_input_args_B = 3
        input_B = [3, 2, 4]
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = 'null'
        return numbers, expected_value

    def test_case_3(self, timeout_window = 5, override = 0):
        # Edge case: both lists are empty
        no_of_input_args_A = 0
        input_A = []
        no_of_input_args_B = 0
        input_B = []
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = 'null'
        return numbers, expected_value

    def test_case_4(self, timeout_window = 5, override = 0):
        # Edge case: one list is empty
        no_of_input_args_A = 3
        input_A = [2, 6, 4]
        no_of_input_args_B = 0
        input_B = []
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = 'null'
        return numbers, expected_value

    def test_case_5(self, timeout_window = 5, override = 0):
        # Edge case: intersection at the first node
        no_of_input_args_A = 3
        input_A = [1, 2, 3]
        no_of_input_args_B = 3
        input_B = [1, 2, 3]
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = '1'
        return numbers, expected_value

    def test_case_6(self, timeout_window = 5, override = 0):
        # Case with negative numbers
        no_of_input_args_A = 4
        input_A = [-9999, -7777, -5555, -3333]
        no_of_input_args_B = 4
        input_B = [-9999, -7777, -5555, -3333]
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = '-9999'
        return numbers, expected_value

    def test_case_7(self, timeout_window = 5, override = 0):
        # Case with mixed positive and negative numbers
        no_of_input_args_A = 5
        input_A = [-10000, 0, 5555, -9999, 2222]
        no_of_input_args_B = 5
        input_B = [5555, -9999, 2222, -1111, 10000]
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = '5555'
        return numbers, expected_value

    def test_case_8(self, timeout_window = 5, override = 0):
        # Case with repeated numbers
        no_of_input_args_A = 6
        input_A = [9999, 9999, -9999, -9999, 0, 0]
        no_of_input_args_B = 6
        input_B = [9999, 9999, -9999, -9999, 0, 0]
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = '9999'
        return numbers, expected_value

    def test_case_9(self, timeout_window = 15, override = 0):  # Increased timeout_window for larger input
        # Large list (10000 elements)
        no_of_input_args_A = 10000
        input_A = list(range(-5000, 5000))
        no_of_input_args_B = 10000
        input_B = list(range(-5000, 5000))
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = '-5000'
        return numbers, expected_value

    def test_case_10(self, timeout_window = 5, override = 0):
        # List with alternating max and min values
        no_of_input_args_A = 10
        input_A = [10000, -10000] * 5
        no_of_input_args_B = 10
        input_B = [10000, -10000] * 5
        numbers = f"{no_of_input_args_A}\n{' '.join(map(str, input_A))}\n{no_of_input_args_B}\n{' '.join(map(str, input_B))}"
        expected_value = '10000'
        return numbers, expected_value
</test.py>

<launch.json>
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++ Debug",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/a.out",
            "stopAtEntry": true,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            // Add debug arguments (refer test cases in dspcoder panel)
            "args": [
                "5",
                "4",
                "1",
                "8",
                "4",
                "5",
                "4",
                "5",
                "6",
                "1",
                "8",
                "4",
                "5"
            ],
            "preLaunchTask": "build"
        }
    ]
}
</launch.json>